{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["BASE_URL","getUser","userId","fetch","then","response","json","user","data","TodoList","state","todoTitle","todoFilter","handleTodos","event","target","name","value","setState","filteredTodos","this","props","selectUser","todos","filter","todo","completed","length","title","includes","className","action","type","onChange","map","key","id","classNames","checked","readOnly","onClick","React","Component","CurrentUser","userFromServer","prevProps","email","phone","clearData","App","selectedUserId","result","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4ebd9ca.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUser(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json())\n    .then(user => user.data);\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    todoTitle: '',\n    todoFilter: 'All',\n  }\n\n  handleTodos = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { selectUser, todos } = this.props;\n    const { todoFilter, todoTitle } = this.state;\n    let filteredTodos;\n\n    switch (todoFilter) {\n      case 'Active':\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n\n      case 'Completed':\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n\n      default:\n        filteredTodos = todos;\n        break;\n    }\n\n    if (todoTitle.length > 0) {\n      filteredTodos = filteredTodos.filter((todo) => {\n        if (todo.title) {\n          return todo.title.includes(todoTitle);\n        }\n\n        return false;\n      });\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form action=\"\">\n          <input\n            type=\"text\"\n            name=\"todoTitle\"\n            value={todoTitle}\n            onChange={this.handleTodos}\n          />\n\n          <select\n            name=\"todoFilter\"\n            value={todoFilter}\n            onChange={this.handleTodos}\n          >\n            <option value=\"All\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  todo.completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked',\n                )}\n              >\n                <label>\n                  <input\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  {'user '}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n  })).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: '',\n  }\n\n  async componentDidMount() {\n    const userFromServer = await getUser(this.props.userId);\n\n    this.setState({ user: userFromServer });\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      const userFromServer = await getUser(this.props.userId);\n      // eslint-disable-next-line\n      this.setState({ user: userFromServer });\n    }\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button onClick={this.props.clearData} type=\"button\">\n          clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearData: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: null,\n  }\n\n  async componentDidMount() {\n    const todosFromServer = await getTodos();\n\n    this.setState({\n      todos: todosFromServer,\n    });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearData = () => {\n    this.setState({\n      selectedUserId: null,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectUser={this.selectUser}\n            todos={todos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId\n              ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearData={this.clearData}\n                />\n              )\n              : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}