{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["BASE_URL","getUser","userId","fetch","then","response","json","user","data","TodoList","selectUser","todos","selectedFilter","handlerFilterStatus","handleInputChange","title","className","action","type","name","value","onChange","event","target","map","todo","key","id","classNames","completed","checked","readOnly","onClick","CurrentUser","clearData","useState","setUser","useEffect","a","userFromServer","handleUser","email","phone","App","setTodos","setTitle","selectedUserId","setUserId","setFilter","todosForFilter","result","filter","todosFromServer","handleTodos","length","includes","newStatus","text","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06409649.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json())\n    .then(result => result.data.filter(todo => todo.userId));\n}\n\nexport function getUser(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json())\n    .then(user => user.data);\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  selectUser,\n  todos,\n  selectedFilter,\n  handlerFilterStatus,\n  handleInputChange,\n  title,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <form action=\"\">\n      <input\n        type=\"text\"\n        name=\"title\"\n        value={title}\n        onChange={(event) => {\n          handleInputChange(event.target.value);\n        }}\n      />\n\n      <select\n        name=\"selectedFilter\"\n        value={selectedFilter}\n        onChange={(event) => {\n          handlerFilterStatus(event.target.value);\n        }}\n      >\n        <option value=\"All\">All</option>\n        <option value=\"Active\">Active</option>\n        <option value=\"Completed\">Completed</option>\n      </select>\n    </form>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              todo.completed\n                ? 'TodoList__item--checked'\n                : 'TodoList__item--unchecked',\n            )}\n          >\n            <label>\n              <input\n                checked={todo.completed}\n                type=\"checkbox\"\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              {'user '}\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  title: PropTypes.string.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n  handlerFilterStatus: PropTypes.func.isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n  })).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport const CurrentUser = ({ clearData, userId }) => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const handleUser = async() => {\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n    };\n\n    handleUser();\n  }, [userId]);\n\n  return (\n    user\n      && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {user.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            onClick={clearData}\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n          >\n            clear\n          </button>\n        </div>\n      )\n  );\n};\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearData: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [title, setTitle] = useState('');\n  const [selectedUserId, setUserId] = useState(0);\n  const [selectedFilter, setFilter] = useState('All');\n\n  let todosForFilter = [...todos];\n\n  const handlerFilterStatus = (newStatus) => {\n    setFilter(newStatus);\n  };\n\n  const handleInputChange = (text) => {\n    setTitle(text);\n  };\n\n  const selectUser = (userId) => {\n    setUserId(userId);\n  };\n\n  const clearData = () => {\n    setUserId(null);\n  };\n\n  useEffect(() => {\n    const handleTodos = async() => {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n    };\n\n    handleTodos();\n  }, []);\n\n  switch (selectedFilter) {\n    case 'Active':\n      todosForFilter = todos.filter(todo => !todo.completed);\n      break;\n\n    case 'Completed':\n      todosForFilter = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      todosForFilter = todos;\n      break;\n  }\n\n  if (title.length > 0) {\n    todosForFilter = todosForFilter.filter((todo) => {\n      if (todo.title) {\n        return todo.title.includes(title);\n      }\n\n      return false;\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          handlerFilterStatus={handlerFilterStatus}\n          handleInputChange={handleInputChange}\n          selectUser={selectUser}\n          todos={todosForFilter}\n          selectedFilter={selectedFilter}\n          title={title}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId\n            ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearData={clearData}\n              />\n            )\n            : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}